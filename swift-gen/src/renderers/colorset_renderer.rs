use super::data::*;
use super::renderer::{Renderer, RendererConfig};

pub struct ColorSetRenderer {}

impl Renderer for ColorSetRenderer {
  fn render_into(&self, ruleset: &RuleSet, d: &mut String, config: &RendererConfig) {
    d.push_str("// Copyright Â© Radio France. All rights reserved.\n\n");
    d.push_str(
      "// This file is automatically generated. Do not edit, your changes will be erased.\n",
    );
    d.push_str("\n");
    d.push_str("import UIKit\n");
    d.push_str("\n");
    d.push_str("//swiftlint:disable force_unwrapping\n");
    d.push_str("extension UIColor {\n");
    self.render_first_ruleset_into(ruleset, d, config);
    d.push_str("}\n");
  }
}

impl ColorSetRenderer {
  fn render_first_ruleset_into(&self, ruleset: &RuleSet, d: &mut String, config: &RendererConfig) {
    for item in &ruleset.items {
      match item {
        RuleSetItem::Declaration(decl) => self.render_declaration_into(decl, d, config), 
        RuleSetItem::RuleSet(ruleset) => self.render_ruleset_into(ruleset, d, config)
      }
    }
  }

  fn render_ruleset_into(&self, ruleset: &RuleSet, d: &mut String, config: &RendererConfig) {
    d.push_str(&format!(
      "\n{}enum {} {{\n",
      config.indent(ruleset.identifier.depth),
      ruleset.identifier.short
    ));

    for item in &ruleset.items {
      match item {
        RuleSetItem::Declaration(decl) => self.render_declaration_into(decl, d, config), 
        RuleSetItem::RuleSet(ruleset) => self.render_ruleset_into(ruleset, d, config)
      }
    }

    d.push_str(&format!("{}}}\n", config.indent(ruleset.identifier.depth)));
  }

  fn render_declaration_into(
    &self,
    declaration: &Declaration,
    d: &mut String,
    config: &RendererConfig,
  ) {
    d.push_str(&format!(
      "{}static let {} = UIColor(named: \"{}\")!\n",
      config.indent(declaration.identifier.depth),
      declaration.identifier.short.to_lowercase(),
      declaration.identifier.full
    ))
  }
}
